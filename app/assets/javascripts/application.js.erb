//= require jquery
//= require jquery_ujs
//= require_self

// https://css-tricks.com/snippets/jquery/get-query-params-object/
jQuery.extend({

  toQueryParams : function(str) {
	  return decodeURIComponent(str || document.location.search).replace(/.*\?/,'').split("&").map(function(n){return n = n.split("="),this[n[0]] = n[1],this}.bind({}))[0];
  }

});

$(window).bind('beforeunload', function(){
  return 'Are you sure you want to leave?';
});

// Place your application-specific JavaScript functions and classes here
// This file is automatically included by javascript_include_tag :defaults

// Functionality to add new items to a page
replace_ids = function(template){  
	var new_id = new Date().getTime();  
	return template.replace(/NEW_RECORD/g, new_id);  
}

activate_links = function(element){
	$(element).find('.remove').each(function(){  
		$(this).click(NestedAttributesJs.remove);  
	});
	$(element).find('.add').each(function(){  
			$(this).click(NestedAttributesJs.add);  
	});
	$(element).find('.add_nested').each(function(){  
			$(this).click(NestedAttributesJs.add_nested);  
	});
	$(element).find('.pull_nested').each(function(){  
		$(this).click(NestedAttributesJs.start_throbber);
		$(this).off("ajax:before").on("ajax:before", NestedAttributesJs.add_live_value_to_query);
		$(this).off("ajax:success").on("ajax:success", NestedAttributesJs.pull_nested);
	});

    $(element).find('.combobox').each(function(i, e){
       e.change(NestedAttributesJs.toggle_comboform_input.bindAsEventListener(this, e));
    });
}

var NestedAttributesJs = {  
    start_throbber : function(e) {
	    $("<img class=\"throb\" src=\"<%= asset_path('icons/throbber.gif') %>\" style=\"vertical-align:middle\" width=\"16\" height=\"16\">").insertAfter(this)
	},
    add_live_value_to_query : function(e) {
			live_value = $(this).closest('fieldset').find('.bequeathed').last().value;
			query = $.toQueryParams(e.target.search)
			query['live_value'] = live_value
			e.target.search = '?'+$.param(query); 
	},
    toggle_comboform_input : function(e2, e){
         combotext = e.parent().next('.comboform');
         if (e.options[e.selectedIndex].value.indexOf("new-") == 0) {
             if (combotext) Effect.BlindDown(combotext, {duration: 0.25});
         } else {
             if (combotext) Effect.BlindUp(combotext, {duration: 0.25});
         };
    },
	remove : function(e) {
		el = e.target;
		target = el.href.replace(/.*#/, '.');
		var oldStyle = el.closest(target).style.border;
		el.closest(target).style.border = "3px solid red";
		
		var conf = confirm("Delete this " + el.href.replace(/.*#/, '') + "?");
		if (conf) {
			el.closest(target).hide();
			if(hidden_input = el.previous("input[type=hidden]")) hidden_input.value = '1';
		}
		else {
			el.closest(target).style.border = oldStyle;
		}
	},
	add : function(e) {  
		element = e.target;
		template = replace_ids(eval(element.href.replace(/.*#/, '') + '_template'));
		insert_with_effect(element.closest('.par'), template);
	},
	add_nested : function(e) {
		el = e.target;
		elements = el.rel.match(/(\w+)/g)
		// refactor this later, after it works
		switch (elements.length) {
		case 2:
			par = '.'+elements[0]
			child = '.'+elements[1]
		
			child_container = $(el).closest('.par')
			parent_object_id = el.closest(par).find('input').first().name.match(/.*\[(\d+)\]/)[1]
		
			tempname = el.href.replace(/.*#/, '');
			template = eval('window.' + tempname + '_template') || eval(tempname + '$' + elements[0] + '_template')
		
			template = replace_ids(template).replace(/(attributes[_\]\[]+)\d+/g, "$1"+parent_object_id);
			re = new RegExp("(" + elements[1] + "_attributes[_\\]\\[]+)\\d+", "g");
			template = template.replace(re, "$1NEW_RECORD");
			break;
		case 3:
			par = '.'+elements[0]
			child = '.'+elements[2]
			
			child_container = $(el).closest('.par')
			parent_object_id = el.closest(par).find('input').first().name.match(/.*\[(\d+)\]/)[1]
			middle_object_id = el.closest('fieldset').find('input').first().name.match(/\d+/g)[1]
			
			template = eval(el.href.replace(/.*#/, '') + '$' + elements[1] + '$' + elements[0] + '_template')
			
			template = replace_ids(template).replace(/(attributes[_\]\[]+)\d+/g, "$1"+parent_object_id);
			re = new RegExp("(" + elements[1] + "_attributes[_\\]\\[]+)\\d+", "g");
			template = template.replace(re, "$1"+middle_object_id);
			re = new RegExp("(" + elements[2] + "_attributes[_\\]\\[]+)\\d+", "g");
			template = template.replace(re, "$1NEW_RECORD");
			break;
		}
		
		insert_with_effect(child_container, replace_ids(template));
	},
	pull_nested : function(e, xhr) {
		el = e.target;
		elements = el.rel.match(/(\w+)/g)
		par = '.'+elements[0]
		
		child_container = $(el).closest('.par')
		
		template = xhr;
		
		insert_with_effect(child_container, template);
		$(el).nextAll('.throb').remove();
		if($(el).hasClass('limit-one')) el.remove();
	}
}; 
  
activate_autocompletes = function(element){  
    $(element).find('.autocomplete').each(function(){
        complendum = this.identify().match(/.*(?=_choices)/g)[0];
        complenda = $(this).attr('data-plural');
        
        new Ajax.Autocompleter(complendum+"_search", complendum+"_choices", "/"+locale+"/"+complenda+"/matching", {
            paramName: "value",
            parameters: "ref="+complendum,
            minchars: 2,
            indicator: complendum+"-search-indicator",
            afterUpdateElement: function(text, li) { 
                complendum = li.id.substr(li.id.indexOf("-")+1);
                if(li.id == "new-"+complendum) { // User chose the 'new X' option 
                    $("#"+complendum+"_id").value = "";
                    newform = $("#"+complendum+'_new');
                    if(newform) {
                        $("#"+complendum+"_search").value = "";
                        Effect.BlindDown(newform, {duration: 0.25} );
                    }
                } 
                else { // User chose a given option
                    $("#"+complendum+"_id").value = parseInt(li.id);
                    newform = $("#"+complendum+'_new');
                    if(newform) Effect.BlindUp(newform, {duration: 0.25} );
                }
            }
        });
    });
};

$(document).ready(function(){  
	activate_links($('body')[0]);
    activate_autocompletes($('body')[0]);
    activate_language_tabs($(".language-list"));
    if ($('#lexeme_dictionary_ids')) { $('#lexeme_dictionary_ids').change(fetch_languages); };
    update_add_links();
});

// Simple add effect
// and updating various observers
function insert_with_effect(container, content){
    $('<div style="display:none;">'+decodeURIComponent(content)+'</div>').insertBefore(container);
    $(container).prev().show(250);
    activate_links($('body')[0]);
    activate_autocompletes($('body')[0]);
    activate_language_tabs($(container).prev().select(".language-list"));
    update_add_links();
};

// For select-all textfields
function select_all(id){
	document.getElementById(id).focus();
	document.getElementById(id).select();
};

// For language tabs
activate_language_tabs = function(elements){
    elements.each(function(i, list){
        $(list).select('li').each(function(){
            if ($(this).hasClass("selected") ) toggle_to_corresponding_content(this);
        });

        $(list).on("click", "li", function(ev, el){
            ev.preventDefault();
            items = $(list).select("li");
            items.removeClass('selected');
            el.addClass("selected");
            toggle_to_corresponding_content(el);
        });
    });
};

function toggle_to_corresponding_content(tab){
    list = tab.closest(".language-list");
    items = $(list).select("li");
    content = list.prevAll(".language-content");
    idx = items.index(tab);
    corresponding = content.children(idx);
    content.children().hide();
    corresponding.show()
}

// Desired logic:
// User changes the list of dictionaries.
// Any translatable tags update with the new list as relevant.
// Anything that's in "default language" should be updated to the appropriate language
// AND! Anything in a tab that's been edited needs to be kept, maybe with a visible indicator if it isn't one of the output langs.
// UGH.

fetch_languages = function() {
    $('#lexeme_dictionary_ids').prop("disabled", true);
    
    $(".translatable").each(function(){
        $(this).find('.language-content').first().children().prop('disabled', true);
        
        langtabs = $(this).find('.language-list ul').first();
//        langtabs.children().each(function(tab){ Effect.Fade(tab, {duration: 0.25})});
        $("<li class=\"throb\"><img class=\"throb\" src=\"<%= asset_path('icons/throbber.gif') %>\" style=\"vertical-align:middle\" width=\"12\" height=\"12\"></li>").prependTo(langtabs);
    });
    
    forms = $(".translatable").map(function() {
        return $(this).attr('data-form');
    });

    request = $.ajax("/"+locale+"/dictionaries.json", {
        method: "get",
        data: { data: "langs", 'dictionaries[]': $('#lexeme_dictionary_ids').val() },
        success: function(response) { 
            // lang_hash = response.responseJSON;
            // update_languages(lang_hash);
            update_languages(response);
        },
    });
};

function update_languages(languages) {
    $('#lexeme_dictionary_ids').prop('disabled', false);
    update_add_links();
    $(".translatable").each(function(i, content){
        oldlangs = $(content).find('.language-content').first().children().map(function(){return $(this).attr('data-language')}).get();
        langtype = $(content).attr("data-languages");
        langtabs = $(content).find('.language-list ul').first();
        // go through each language in the languages for the appropriate language class
        $.each(languages[langtype], function(){
        // if an existing div is in the languages, keep it (moving it to the appropriate position); if it's not, flag it as not to be saved (if content) or remove it (if not)
            if (oldlangs.includes(this.underscore_code)) {
                // old field and tab
                oldfield = $(content).find('[data-language='+this.underscore_code+']').first();
                oldtab_index = $(oldfield).parent().children().index(oldfield) + 1;  
                oldtab = $(content).find('li', oldtab_index).first();

                oldfield.prop('disabled', false);

                // reposition tab & field
                oldfield.parent().append(oldfield);
                oldtab.parent().append(oldtab);
                oldtab.removeClass('warning');
                oldtab.show(250);
            } else { 
                // if it's in the languages and doesn't already have a field, duplicate, blanken, re-ID, and add it in its place     
                oldfield = $(content).find('input,textarea').first();
                oldtab = $(content).find('li', 1).first();
                oldlang = $(oldfield).attr('data-language');
                
                newfield = $(oldfield).parent().append(oldfield.clone(true));
                    posindex = $(oldfield).attr('id').lastIndexOf(oldlang);
                newfield.id = $(oldfield).attr('id').substring(0, posindex) + this.underscore_code + $(oldfield).attr('id').substring(posindex + oldlang.length)
//                newfield.id = oldfield.identify().replace(/(.+_).+$/, "$1"+language.underscore_code);
                    posindex = $(oldfield).attr('name').lastIndexOf(oldlang);
                newfield.name = $(oldfield).attr('name').substring(0, posindex) + this.underscore_code + $(oldfield).attr('name').substring(posindex + oldlang.length)
//                newfield.name = oldfield.name.replace(/(.+_).*?\]$/, "$1"+language.underscore_code+"]");
                newfield.val("");
                newtab = $(oldtab).parent().append(oldtab.clone(true));
                newtab.innerHTML = this.tab;
                newtab.removeClass('warning');
                newtab.removeClass('default');
                $(newfield).attr('data-language', this.underscore_code);
                newtab.show(250);
            }        
        });
        
        // dropped_languages = oldlangs.without.apply(oldlangs, languages[langtype].map(function(){return $(this).underscore_code}));
        dropped_languages = $(oldlangs).not(languages[langtype].map(function(){return $(this).underscore_code}));
        dropped_languages.each(function(){
            oldfield = $(content).find('[data-language='+this+']').first();
            oldtab_index = $(oldfield).parent().children().index(oldfield) + 1;
            oldtab = $(content).find('li', oldtab_index).first();
            
                // if droppable is DEFAULT then add its content to any blank, then remove.
            if (oldtab.hasClass('default')) {
                clean_defaults(content, oldfield, oldtab);
                    
//                    newfields = content.select('input,textarea');
//                    newfields.each(function(newfield) {
//                        if (newfield.getValue() == "") { newfield.setValue($F(oldfield)); }
//                    });
//                    oldfield.remove();
//                    oldtab.remove();
                    
            } 
                
            oldfield.prop('disabled', false);
            oldtab.addClass('warning');
            
            oldfield.parent().append(oldfield);
            oldtab.parent().append(oldtab);
            oldtab.show(0.25);
        });
        
        // deselect all tabs
        langtabs.select('li').removeClass('selected');
        langtabs.select('li').removeClass('solo');
        langtabs.select('.throb').remove();
        
        // toggle to first
        langtabs.find('li').first().addClass('selected');
        if (langtabs.select('li').length == 1) { langtabs.find('li').first().addClass('solo') };
        toggle_to_corresponding_content(langtabs.find('li').first());
        langtabs.css({ width: $(content).find('input,textarea').first().width() + "px" });
        
        $(content).find('.language-content').first().children().prop('disabled', false);
    });
};

function update_add_links(){
    $(".pull_nested").each(function(){
        params = $.toQueryParams($(this).attr('href'));
        params['dictionaries'] = $('#lexeme_dictionary_ids').val();
        $(this).prop('href', this.pathname + '?' + $.param(params));
    });
};

// if a language is DEFAULT (old db style, or new lexeme) then add its content to any blank.
function clean_defaults(content, oldfield, oldtab){  
    newfields = content.select('input,textarea');
    newfields.each(function() {
        if (this.val() == "") { this.setValue($F(oldfield)); }
    });
    oldfield.setValue("");
    //oldfield.remove();
    //oldtab.remove();
}
